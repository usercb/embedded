#include <wiringPi.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <softPwm.h>
#include <signal.h>

#include <time.h>
#include <math.h>
#include <pthread.h>
#include <wiringPiSPI.h>
#include <mysql/mysql.h>


#define RED 4//29
#define FAN 6
#define LOOPSTIMINGS 85
#define MOTORCONTROL 23
#define RGBLEDPOWER  19 //BCM_GPIO 19

#define CS_MCP3208 8
#define SPI_CHANNEL 0
#define SPI_SPEED 1000000

#define VCC	4.8

#define RETRY 5
#define LOOPS 445745

void sig_handler(int signo); // SIGINT 사용 마지막 종료 함수
int ret_humid, ret_temp;

static int DHTPIN = 7;
static int dht22_dat[5] = {0,0,0,0,0};

#define DBHOST "localhost"
#define DBUSER "root"
#define DBPASS "root"
#define DBNAME "demofarmdb"

MYSQL *connector;
MYSQL_RES *result;
MYSQL_ROW row;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t f_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t l_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t empty, fan, fill, led;
char query[1024];
int _queue[LOOPS];
int front, rear;
int mon;


void init_queue(void){
	    front = rear = 0;
}

void clear_queue(void){
	    front = rear;
}

int put(int k){
	    _queue[rear] = k;
	        rear = ++rear % LOOPS;
		    return k;
}

int get(void){
	    int i;
	        i = _queue[front];
		    front = ++front % LOOPS;
		        return i;
}

static uint8_t sizecvt(const int read)
{
  if (read > 255 || read < 0)
    {
        printf("Invalid data from wiringPi library\n");
        exit(EXIT_FAILURE);
     }
  return (uint8_t)read;
}
int read_dht22_dat()
{
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
	dht22_dat[0] = dht22_dat[1] = dht22_dat[2] = dht22_dat[3] = dht22_dat[4] = 0;
	pinMode(DHTPIN, OUTPUT);
	digitalWrite(DHTPIN, HIGH);
	delay(10);
	digitalWrite(DHTPIN, LOW);
	delay(18);
	digitalWrite(DHTPIN, HIGH);
	delayMicroseconds(40); 
	pinMode(DHTPIN, INPUT);
	 for( i=0; i< LOOPSTIMINGS; i++) {
	    counter = 0;
	    while (sizecvt(digitalRead(DHTPIN)) == laststate) {
	      counter++;
	      delayMicroseconds(1);
	      if (counter == 255) {
		  break;
	       }
	     }
	    laststate = sizecvt(digitalRead(DHTPIN));
	    if (counter == 255) break;

	    if((i>=4)&&(i%2 ==0)){
		    dht22_dat[j/8] <<=1;
		    if(counter > 50)
	 		   dht22_dat[j/8] |=1;
		    j++;
	   		 }
	   }

	 if ((j>=40)&&(dht22_dat[4] == ((dht22_dat[0]  + dht22_dat[1] + dht22_dat[2] + dht22_dat[3]) & 0xFF)) ) {
	        float t, h;
	        h = (float)dht22_dat[0] * 256 + (float)dht22_dat[1];
		h /=10;
		t = (float)(dht22_dat[2] & 0x7F)* 256 + (float)dht22_dat[3];
		t /= 10.0;
		if ((dht22_dat[2] & 0x80) != 0)  t *= -1;
			ret_humid = (int)h;
			ret_temp = (int)t;

		return ret_temp;
	 }
	 else
	 {
		 printf ("data not good, skip\n");
		 return 0;
	 }
}

/*
 MCP3208로 부터 SPI통신을 통해 조도센서의 값을 받아오는 함수
*/
int read_mcp3208_adc(unsigned char adcChannel)  
{
	unsigned char buff[3]; // 데이타 버퍼 
	int adcValue = 0; //MCP3208로부터 받아온 디지털 값 
	/*
		라즈베리 파이가 MCP3208로 보내는 값 
		ADC채널 값은 D2 D1 D0로 0~7의 값을 가진다. 
		buff[0] = 0 0 0 0 0 Start SGL D2
		0x06 = 0000_0110 : Start 와 SGL 신호의 값을 1로 셋팅 
		adcChannel & 0x07 >> 2 : ADC 채널 값을 마스킹하고 첫번째 비트의 값을 D2에 셋팅
		buff[1] = D1 D2 x x x x x x 
		adcChannel & 0x07 << 6 ADC채널의 1번째 0번째 값을 D1 D0에 셋팅
		buff[2] = x x x x x x x x 
		불필요한 값 
	*/
	buff[0] = 0x06 | ((adcChannel & 0x07) >> 2);
	buff[1] = ((adcChannel & 0x07) << 6);
	buff[2] = 0x00;
	digitalWrite(CS_MCP3208, 0);
	/*
		SPI 통신을 통해 MCP3208에 명령 전달 
	*/
	wiringPiSPIDataRW(SPI_CHANNEL, buff, 3);
	/*
		MCP3208이 보낸 값을 가공 
	*/
	buff[1] = 0x0f & buff[1];
	adcValue = (buff[1] << 8) | buff[2];
	digitalWrite(CS_MCP3208, 1);
	
	return adcValue;
}

int get_light_sensor() {
	unsigned char adcChannel_light = 0;
	int adcValue_light = 0;
	adcValue_light = read_mcp3208_adc(adcChannel_light);
	return adcValue_light;
}



void *th_fan(void *arg) {
	
	while(1){
	printf("in fan thread\n");
	pthread_mutex_lock(&f_mutex);
	pthread_cond_wait(&fan, &f_mutex);
	digitalWrite(FAN, 1);
	delay(5000);
	digitalWrite(FAN, 0);
	pthread_mutex_unlock(&f_mutex);
	}
}

void *th_led(void *arg) {
	
	while(1){
	printf("in led thread\n");	
	pthread_mutex_lock(&l_mutex);
	pthread_cond_wait(&led, &l_mutex);
	digitalWrite(RED,1);
	pthread_mutex_unlock(&l_mutex);
	}
}

void *producer(void *arg) {
	int i;
	int temp, light;
	for(i=0;i<LOOPS;i++) {
	pthread_mutex_lock(&mutex); 
	while((rear + 1) % LOOPS == front) 
	pthread_cond_wait(&empty, &mutex);  
	temp = read_dht22_dat();
	light = get_light_sensor();
	
	put(temp);
	put(light);	
	printf(" temperter is %d \n",temp);
	printf(" lightness is %d \n",light);
	if (temp >= 20) {
		pthread_cond_signal(&fan);
	}
	if (light<= 3000) {
		pthread_cond_signal(&led);
	}
	else {	
		digitalWrite(RED, 0);
	}	
	pthread_cond_signal(&fill);
	pthread_mutex_unlock(&mutex);
	delay(1000); 
	}
}
void *customer(void *arg) {
	int i;
	for(i=0;i<LOOPS;i++) {
	pthread_mutex_lock(&mutex); 
	while(front == rear) //버퍼에 데이터가 없으면
	pthread_cond_wait(&fill, &mutex); //fill 신호를 기다리고 mutex를 푼다 
	int temp = get();
	int light = get();
	if(mon % 20 == 0 || mon % 20 == 1) {
		connector = mysql_init(NULL);
		if(!mysql_real_connect(connector, DBHOST, DBUSER, DBPASS, DBNAME, 3306, NULL, 0)){
			fprintf(stderr, "%s\n", mysql_error(connector));
			return 0;
		}

		printf("MySQL(rpidb) opened.\n");
	  	sprintf(query, "insert into thl  values ( now(),%d, %d, %d)", temp,0 ,light);
		if(mysql_query(connector, query)){
			fprintf(stderr, "%s\n", mysql_error(connector));
			printf("Write DB error\n");
		}
	}
		pthread_cond_signal(&empty);
		pthread_mutex_unlock(&mutex);
	}
}
int main (void)
{
	signal(SIGINT, (void *)sig_handler);
	int adcChannel = 0;
	int adcValue[8] = {0};
	init_queue();
	if(setuid(getuid()) < 0) {
		perror("Dropping Failed\n");
		exit(EXIT_FAILURE);
	}
	if (wiringPiSetupGpio() == -1)
	{
		fprintf(stdout, "Unable to start wiringPi: %s\n", strerror(errno));
		return 1;
	}
	if (wiringPiSPISetup(SPI_CHANNEL, SPI_SPEED) == -1)
	{
		fprintf(stdout, "wiringPiSPISetup Failed: %s\n", strerror(errno));
		return 1;
	}
	pinMode(CS_MCP3208, OUTPUT);
	pinMode(FAN, OUTPUT);
	pinMode(RGBLEDPOWER, OUTPUT);
	pinMode(RED, OUTPUT);	
	digitalWrite(RGBLEDPOWER,1);
	connector = mysql_init(NULL);
	if (!mysql_real_connect(connector, DBHOST, DBUSER, DBPASS, DBNAME, 3306, NULL, 0))
	{
		fprintf(stderr, "%s\n", mysql_error(connector));
		return 0;
	}
	
	pthread_t pro, costu, fan_p, led_p;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_init(&f_mutex, NULL);
	pthread_mutex_init(&l_mutex, NULL);
	pthread_cond_init(&empty, NULL);
	pthread_cond_init(&fill, NULL);
	pthread_cond_init(&fan, NULL);
	pthread_cond_init(&led, NULL);
	pthread_create(&costu, NULL, customer, NULL);
	pthread_create(&pro, NULL, producer, NULL);
	pthread_create(&fan_p, NULL, th_fan, NULL);
	pthread_create(&led_p, NULL, th_led, NULL);
	pthread_join(costu, NULL);
	pthread_join(pro, NULL);
	pthread_join(fan_p, NULL);
	pthread_join(led_p, NULL);
	pthread_mutex_destroy(&mutex);
	pthread_mutex_destroy(&l_mutex);
	pthread_mutex_destroy(&f_mutex);
	pthread_cond_destroy(&fill);
	pthread_cond_destroy(&empty);
	pthread_cond_destroy(&fan);
	pthread_cond_destroy(&led);
	return 0;
}

void sig_handler(int signo)
{
	printf("process stop\n");
	digitalWrite(FAN, 0);
	digitalWrite(RED, 0);
	digitalWrite(RGBLEDPOWER,0);
	exit(0);
}
